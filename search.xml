<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[numpy 100题练习 Day5]]></title>
    <url>%2F2019%2F05%2F24%2Fnumpy-100%E9%A2%98%E7%BB%83%E4%B9%A0-Day5%2F</url>
    <content type="text"><![CDATA[https://github.com/rougier/numpy-100 How to sum a small array faster than np.sum?1234# Author: Evgeni BurovskiZ = np.arange(10)np.add.reduce(Z) Consider two random array A and B, check if they are equal12345678910A = np.random.randint(0,2,5)B = np.random.randint(0,2,5)# Assuming identical shape of the arrays and a tolerance for the comparison of valuesequal = np.allclose(A,B)print(equal)# Checking both the shape and the element values, no tolerance (values have to be exactly equal)equal = np.array_equal(A,B)print(equal) Make an array immutable (read-only)123Z = np.zeros(10)Z.flags.writeable = FalseZ[0] = 1 Consider a random 10x2 matrix representing cartesian coordinates, convert them to polar coordinates123456Z = np.random.random((10,2))X,Y = Z[:,0], Z[:,1]R = np.sqrt(X**2+Y**2)T = np.arctan2(Y,X)print(R)print(T) Create random vector of size 10 and replace the maximum value by 0123Z = np.random.random(10)Z[Z.argmax()] = 0print(Z) Create a structured array with x and y coordinates covering the [0,1]x[0,1] area1234Z = np.zeros((5,5), [('x',float),('y',float)])Z['x'], Z['y'] = np.meshgrid(np.linspace(0,1,5), np.linspace(0,1,5))print(Z) Given two arrays, X and Y, construct the Cauchy matrix C (Cij =1/(xi - yj))123456# Author: Evgeni BurovskiX = np.arange(8)Y = X + 0.5C = 1.0 / np.subtract.outer(X, Y)print(np.linalg.det(C)) Print the minimum and maximum representable value for each numpy scalar type1234567for dtype in [np.int8, np.int32, np.int64]: print(np.iinfo(dtype).min) print(np.iinfo(dtype).max)for dtype in [np.float32, np.float64]: print(np.finfo(dtype).min) print(np.finfo(dtype).max) print(np.finfo(dtype).eps) How to print all the values of an array?123np.set_printoptions(threshold=np.nan)Z = np.zeros((16,16))print(Z) How to find the closest value (to a given scalar) in a vector?1234Z = np.arange(100)v = np.random.uniform(0,100)index = (np.abs(Z-v)).argmin()print(Z[index])]]></content>
      <categories>
        <category>数据科学</category>
      </categories>
      <tags>
        <tag>python</tag>
        <tag>numpy</tag>
        <tag>data science</tag>
        <tag>数据科学</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[numpy 100题练习 Day4]]></title>
    <url>%2F2019%2F05%2F24%2Fnumpy-100%E9%A2%98%E7%BB%83%E4%B9%A0-Day4%2F</url>
    <content type="text"><![CDATA[https://github.com/rougier/numpy-100 How to ignore all numpy warnings (not recommended)?123456# Suicide mode ondefaults = np.seterr(all="ignore")Z = np.ones(1) / 0# Back to sanity_ = np.seterr(**defaults) An equivalent way, with a context manager: 12with np.errstate(divide='ignore'): Z = np.ones(1) / 0 Is the following expressions true?1np.sqrt(-1) == np.emath.sqrt(-1) How to get the dates of yesterday, today and tomorrow?123yesterday = np.datetime64('today', 'D') - np.timedelta64(1, 'D')today = np.datetime64('today', 'D')tomorrow = np.datetime64('today', 'D') + np.timedelta64(1, 'D') How to get all the dates corresponding to the month of July 2016?12Z = np.arange('2016-07', '2016-08', dtype='datetime64[D]')print(Z) How to compute ((A+B)*(-A/2)) in place (without copy)?1234567A = np.ones(3)*1B = np.ones(3)*2C = np.ones(3)*3np.add(A,B,out=B)np.divide(A,2,out=A)np.negative(A,out=A)np.multiply(A,B,out=A) Extract the integer part of a random array using 5 different methods1234567Z = np.random.uniform(0,10,10)print (Z - Z%1)print (np.floor(Z))print (np.ceil(Z)-1)print (Z.astype(int))print (np.trunc(Z)) Create a 5x5 matrix with row values ranging from 0 to 4123Z = np.zeros((5,5))Z += np.arange(5)print(Z) Consider a generator function that generates 10 integers and use it to build an array12345def generate(): for x in range(10): yield xZ = np.fromiter(generate(),dtype=float,count=-1)print(Z) Create a vector of size 10 with values ranging from 0 to 1, both excluded12Z = np.linspace(0,1,11,endpoint=False)[1:]print(Z) Create a random vector of size 10 and sort it123Z = np.random.random(10)Z.sort()print(Z)]]></content>
      <categories>
        <category>数据科学</category>
      </categories>
      <tags>
        <tag>python</tag>
        <tag>numpy</tag>
        <tag>data science</tag>
        <tag>数据科学</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[numpy 100题练习 Day3]]></title>
    <url>%2F2019%2F05%2F24%2Fnumpy-100%E9%A2%98%E7%BB%83%E4%B9%A0-Day3%2F</url>
    <content type="text"><![CDATA[https://github.com/rougier/numpy-100 Create a checkerboard 8x8 matrix using the tile function1234567891011Z = np.tile( np.array([[0,1],[1,0]]), (4,4))print(Z)[[0 1 0 1 0 1 0 1] [1 0 1 0 1 0 1 0] [0 1 0 1 0 1 0 1] [1 0 1 0 1 0 1 0] [0 1 0 1 0 1 0 1] [1 0 1 0 1 0 1 0] [0 1 0 1 0 1 0 1] [1 0 1 0 1 0 1 0]] numpy.tile https://docs.scipy.org/doc/numpy/reference/generated/numpy.tile.html Construct an array by repeating A the number of times given by reps. If reps has length d, the result will have dimension of max(d, A.ndim). If A.ndim &lt; d, A is promoted to be d-dimensional by prepending new axes. So a shape (3,) array is promoted to (1, 3) for 2-D replication, or shape (1, 1, 3) for 3-D replication. If this is not the desired behavior, promote A to d-dimensions manually before calling this function. If A.ndim &gt; d, reps is promoted to A.ndim by pre-pending 1’s to it. Thus for an A of shape (2, 3, 4, 5), a reps of (2, 2) is treated as (1, 1, 2, 2). 参数 A （the input array） reps （the number of repetitions of a long each axis） 例子1234567891011&gt;&gt;&gt; a = np.array([0, 1, 2])&gt;&gt;&gt; np.tile(a, 2)array([0, 1, 2, 0, 1, 2])&gt;&gt;&gt; np.tile(a, (2, 2))array([[0, 1, 2, 0, 1, 2], [0, 1, 2, 0, 1, 2]]) &gt;&gt;&gt; np.tile(a, (2, 1, 2))array([[[0, 1, 2, 0, 1, 2]], [[0, 1, 2, 0, 1, 2]]]) Normalize a 5x5 random matrix123456789Z = np.random.random((5,5))Z = (Z - np.mean (Z)) / (np.std (Z))print(Z)[[-1.500019 1.11585252 -0.47634185 -0.82878742 0.83100145] [-0.60877327 0.80508094 1.01055956 0.8768261 -1.14530307] [-1.42879691 0.42025043 1.33401344 -0.16557947 -0.25317782] [-1.15284007 -0.71064254 -0.33070097 -1.340814 1.22239397] [ 0.29678951 1.15295262 1.34864726 -1.48277079 1.01017939]] Create a custom dtype that describes a color as four unsigned bytes (RGBA)1234color = np.dtype([("r", np.ubyte, 1), ("g", np.ubyte, 1), ("b", np.ubyte, 1), ("a", np.ubyte, 1)]) Multiply a 5x3 matrix by a 3x2 matrix (real matrix product)123456789101112Z = np.dot(np.ones((5,3)), np.ones((3,2)))print(Z)# Alternative solution, in Python 3.5 and aboveZ = np.ones((5,3)) @ np.ones((3,2))print(Z)[[3. 3.] [3. 3.] [3. 3.] [3. 3.] [3. 3.]] numpy.dotDot product of two arrays. Specifically, If both a and b are 1-D arrays, it is inner product of vectors (without complex conjugation). If both a and b are 2-D arrays, it is matrix multiplication, but using matmul or a @ b is preferred. If either a or b is 0-D (scalar), it is equivalent to multiply and using numpy.multiply(a, b) or a * b is preferred. If a is an N-D array and b is a 1-D array, it is a sum product over the last axis of a and b. If a is an N-D array and b is an M-D array (where M&gt;=2), it is a sum product over the last axis of a and the second-to-last axis of b: 1dot(a, b)[i,j,k,m] = sum(a[i,j,:] * b[k,:,m]) 参数 a b out 例子12345678&gt;&gt;&gt; np.dot(3, 4)12&gt;&gt;&gt; a = [[1, 0], [0, 1]]&gt;&gt;&gt; b = [[4, 1], [2, 2]]&gt;&gt;&gt; np.dot(a, b)array([[4, 1], [2, 2]]) Given a 1D array, negate all elements which are between 3 and 8, in place.1234567# Author: Evgeni BurovskiZ = np.arange(11)Z[(3 &lt; Z) &amp; (Z &lt;= 8)] *= -1print(Z)&gt;&gt;&gt; [ 0 1 2 3 -4 -5 -6 -7 -8 9 10] What is the output of the following script?12345678# Author: Jake VanderPlasprint(sum(range(5),-1))from numpy import *print(sum(range(5),-1))&gt;&gt;&gt; 9&gt;&gt;&gt; 10 Consider an integer vector Z, which of these expressions are legal?123456Z**Z2 &lt;&lt; Z &gt;&gt; 2Z &lt;- Z1j*ZZ/1/1Z&lt;Z&gt;Z What are the result of the following expressions?1234567print(np.array(0) / np.array(0))print(np.array(0) // np.array(0))print(np.array([np.nan]).astype(int).astype(float))&gt;&gt;&gt; nan&gt;&gt;&gt; 0&gt;&gt;&gt; [-9.22337204e+18] How to round away from zero a float array ?123456# Author: Charles R HarrisZ = np.random.uniform(-10,+10,10)print (np.copysign(np.ceil(np.abs(Z)), Z))&gt;&gt;&gt; [ -3. -5. -9. -6. 2. 2. -1. 10. -6. -10.] How to find common values between two arrays?12345Z1 = np.random.randint(0,10,10)Z2 = np.random.randint(0,10,10)print(np.intersect1d(Z1,Z2))&gt;&gt;&gt; [1 2 4 6 8] https://docs.scipy.org/doc/numpy/reference/generated/numpy.intersect1d.html numpy.intersect1dFind the intersection of two arrays. Return the sorted, unique values that are in both of the input arrays. 123&gt;&gt;&gt; np.intersect1d([1, 3, 4, 3], [3, 1, 2, 1])&gt;&gt;&gt; array([1, 3])]]></content>
      <categories>
        <category>数据科学</category>
      </categories>
      <tags>
        <tag>python</tag>
        <tag>numpy</tag>
        <tag>data science</tag>
        <tag>数据科学</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[numpy 100题练习 Day2]]></title>
    <url>%2F2019%2F05%2F24%2Fnumpy-100%E9%A2%98%E7%BB%83%E4%B9%A0-Day2%2F</url>
    <content type="text"><![CDATA[https://github.com/rougier/numpy-100 Create a 3x3 identity matrix创建一个3x3的矩阵，返回一个对角线是1，其余是0的数组。 np.eye(N)，N行。 123456Z = np.eye(3)print(Z)&gt;&gt;&gt; [[1. 0. 0.] [0. 1. 0.] [0. 0. 1.]] Create a 3x3x3 array with random values创建一个用随机数组成的3x3x3数组。 1234567891011121314Z = np.random.random((3,3,3))print(Z)&gt;&gt;&gt; [[[0.11085346 0.63675724 0.56551715] [0.85845655 0.83132722 0.15546257] [0.68620584 0.9561824 0.59587874]] [[0.49882408 0.56935352 0.9964925 ] [0.81017846 0.83963088 0.77471192] [0.59353945 0.73767187 0.6880103 ]] [[0.4130483 0.55252658 0.88652063] [0.45995876 0.66758083 0.57286753] [0.34854386 0.09369495 0.90712067]]] Create a 10x10 array with random values and find the minimum and maximum values创建一个10x10的随机数组，并且找到最小值和最大值。 12345Z = np.random.random((10,10))Zmin, Zmax = Z.min(), Z.max()print(Zmin, Zmax)&gt;&gt;&gt; 0.0009066852233082789 0.9990012244445428 Create a random vector of size 30 and find the mean value创建一个大小为30的随机矢量，并且找到平均值。 np.mean 计算元素的平均值。 12345Z = np.random.random(30)m = Z.mean()print(m)&gt;&gt;&gt; 0.4892178091799963 Create a 2d array with 1 on the border and 0 inside创建一个2维数组，并且边框都为数值1，内部数组都为0。 运用切片，[start:stop:step]。 123Z = np.ones((10,10))Z[1:-1,1:-1] = 0print(Z) 1234567891011# output[[1. 1. 1. 1. 1. 1. 1. 1. 1. 1.] [1. 0. 0. 0. 0. 0. 0. 0. 0. 1.] [1. 0. 0. 0. 0. 0. 0. 0. 0. 1.] [1. 0. 0. 0. 0. 0. 0. 0. 0. 1.] [1. 0. 0. 0. 0. 0. 0. 0. 0. 1.] [1. 0. 0. 0. 0. 0. 0. 0. 0. 1.] [1. 0. 0. 0. 0. 0. 0. 0. 0. 1.] [1. 0. 0. 0. 0. 0. 0. 0. 0. 1.] [1. 0. 0. 0. 0. 0. 0. 0. 0. 1.] [1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]] How to add a border (filled with 0’s) around an existing array?如何在当前数组添加一个用数值0填充的边框？ 123Z = np.ones((5,5))Z = np.pad(Z, pad_width=1, mode='constant', constant_values=0)print(Z) 12345678# output[[0. 0. 0. 0. 0. 0. 0.] [0. 1. 1. 1. 1. 1. 0.] [0. 1. 1. 1. 1. 1. 0.] [0. 1. 1. 1. 1. 1. 0.] [0. 1. 1. 1. 1. 1. 0.] [0. 1. 1. 1. 1. 1. 0.] [0. 0. 0. 0. 0. 0. 0.]] Numpy.pad() https://docs.scipy.org/doc/numpy/reference/generated/numpy.pad.html 填充数组。 参数： rank N 填充的数组 pad_width 填充的数值 mode 有11种填充模式，constant表示连续填充相同的值。constant_values = (x,y) stat_length constant_values end_values reflect_type What is the result of the following expression?12345678910111213print(0 * np.nan)print(np.nan == np.nan)print(np.inf &gt; np.nan)print(np.nan - np.nan)print(np.nan in set([np.nan]))print(0.3 == 3 * 0.1)nanFalseFalsenanTrueFalse IEEE 754 floating point representation of Not a Number (NaN). Create a 5x5 matrix with values 1,2,3,4 just below the diagonal创建一个在对角线下方的值为1，2，3，4 的 5x5矩阵。 12345678Z = np.diag(1+np.arange(4),k=-1)print(Z)[[0 0 0 0 0] [1 0 0 0 0] [0 2 0 0 0] [0 0 3 0 0] [0 0 0 4 0]] http://www.numpy.org/devdocs/reference/generated/numpy.diag.html Create a 8x8 matrix and fill it with a checkerboard pattern创建一个内部填充棋盘图案的8x8矩阵。 12345678910111213Z = np.zeros((8,8),dtype=int)Z[1::2,::2] = 1Z[::2,1::2] = 1print(Z)[[0 1 0 1 0 1 0 1] [1 0 1 0 1 0 1 0] [0 1 0 1 0 1 0 1] [1 0 1 0 1 0 1 0] [0 1 0 1 0 1 0 1] [1 0 1 0 1 0 1 0] [0 1 0 1 0 1 0 1] [1 0 1 0 1 0 1 0]] Consider a (6,7,8) shape array, what is the index (x,y,z) of the 100th element?在一个形状为（6，7，8）的数组里，第100个元素的索引（x，y，z）的数值是？ 123print(np.unravel_index(99,(6,7,8)))&gt;&gt;&gt; (1, 5, 4) https://docs.scipy.org/doc/numpy/reference/generated/numpy.unravel_index.html]]></content>
      <categories>
        <category>数据科学</category>
      </categories>
      <tags>
        <tag>python</tag>
        <tag>numpy</tag>
        <tag>data science</tag>
        <tag>数据科学</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[numpy 100题练习 Day1]]></title>
    <url>%2F2019%2F05%2F24%2Fnumpy-100%E9%A2%98%E7%BB%83%E4%B9%A0-Day1%2F</url>
    <content type="text"><![CDATA[https://github.com/rougier/numpy-100 Import the numpy package under the name np使用import语句导入numpy，别名为np。 1import numpy as np Print the numpy version and the configuration查看numpy的版本和设置。 1234print(np.__version__)np.show_config()# 记得要先运行导入numpy代码，才能运行这个 Create a null vector of size 10创建一个大小为10，全是浮点数0的矢量 1234Z = np.zeros(10)print(Z)&gt;&gt;&gt; [0. 0. 0. 0. 0. 0. 0. 0. 0. 0.] How to find the memory size of any array数组总字节大小的属性 = 数组的总大小size * 每个数组元素字节的大小itemsize 1234Z = np.zeros((10,10))print("%d bytes" % (Z.size * Z.itemsize))&gt;&gt;&gt; 800 bytes How to get the documentation of the numpy add function from the command line?如何在cmd得到numpy.add函数的文档？ 1python -c "import numpy; numpy.info(numpy.add)" Create a null vector of size 10 but the fifth value which is 1创建10个浮点数值为0的矢量，改变索引5的值，改成1。 12345Z = np.zeros(10)Z[4] = 1print(Z)&gt;&gt;&gt; [0. 0. 0. 0. 1. 0. 0. 0. 0. 0.] Create a vector with values ranging from 10 to 49创建一个矢量，生成start = 10, stop = 50的等间隔数值，默认间隔为1。 12345Z = np.arange(10,50)print(Z)&gt;&gt;&gt; [10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49] Reverse a vector (first element becomes last)创建一个矢量，生成start = 10, stop = 50的等间隔数值，默认间隔为1。并且所有元素逆序。 1234567Z = np.arange(50)Z = Z[::-1]print(Z)&gt;&gt;&gt; [49 48 47 46 45 44 43 42 41 40 39 38 37 36 35 34 33 32 31 30 29 28 27 26 25 24 23 22 21 20 19 18 17 16 15 14 13 12 11 10 9 8 7 6 5 4 3 2 1 0] Create a 3x3 matrix with values ranging from 0 to 8创建一个矩阵，生成start = 0, stop = 9 的等间隔数值，默认间隔为1。3行3列。 1234Z = np.arange(9).reshape(3,3)print(Z)&gt;&gt;&gt;[[0 1 2][3 4 5][6 7 8]] Find indices of non-zero elements from [1,2,0,0,4,0]从[1,2,0,0,4,0]中查找非0元素。 np.nonzero()返回非0元素的位置，数组中索引0、1、4的位置分别为1、2、4。 1234nz = np.nonzero([1,2,0,0,4,0])print(nz)&gt;&gt;&gt; (array([0, 1, 4]),)]]></content>
      <categories>
        <category>数据科学</category>
      </categories>
      <tags>
        <tag>python</tag>
        <tag>numpy</tag>
        <tag>data science</tag>
        <tag>数据科学</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[读书笔记 numpy入门 第7章 花式索引]]></title>
    <url>%2F2019%2F05%2F24%2F%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0-numpy%E5%85%A5%E9%97%A8-%E7%AC%AC7%E7%AB%A0-%E8%8A%B1%E5%BC%8F%E7%B4%A2%E5%BC%95%2F</url>
    <content type="text"><![CDATA[https://github.com/jakevdp/PythonDataScienceHandbook https://www.numpy.org.cn Fancy indexing作用-获取数组中特定元素快速获得并修改复杂的数组值得子数据集。 传递的是索引数组，而不是单个标量。 单个维度1234567891011import numpy as nprand = np.random.RandomState(42)x = rand.randint(100, size=10)print(x)&gt;&gt;&gt; [51 92 14 71 60 20 82 86 74 74][x[3], x[7], x[2]]&gt;&gt;&gt; [71, 86, 14] 123456# 传递索引的单个列表或数组ind = [3, 7, 4]x[ind]&gt;&gt;&gt; array([71, 86, 60]) 12345678# 利用花哨的索引，结果的形状与索引数组的形状一致，而不是与被索引数组的形状一致ind = np.array([[3, 7], [4, 5]])x[ind]&gt;&gt;&gt; array([[71, 86], [60, 20]]) 多维度123456789101112X = np.arange(12).reshape((3, 4))X&gt;&gt;&gt; array([[ 0, 1, 2, 3], [ 4, 5, 6, 7], [ 8, 9, 10, 11]]) row = np.array([0, 1, 2])col = np.array([2, 1, 3])X[row, col]&gt;&gt;&gt; array([ 2, 5, 11])]]></content>
      <categories>
        <category>数据科学</category>
      </categories>
      <tags>
        <tag>python</tag>
        <tag>numpy</tag>
        <tag>data science</tag>
        <tag>数据科学</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[读书笔记 numpy入门 第5章 广播]]></title>
    <url>%2F2019%2F05%2F24%2F%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0-numpy%E5%85%A5%E9%97%A8-%E7%AC%AC5%E7%AB%A0-%E5%B9%BF%E6%92%AD%2F</url>
    <content type="text"><![CDATA[https://docs.scipy.org/doc/numpy/user/basics.broadcasting.html https://github.com/jakevdp/PythonDataScienceHandbook 广播 Broadcasting执行算术运算时使用不同形状的数组 广播规则 如果两个数组的维度数不相同，那么小维度数组的形状将会在最左边补 1。 如果两个数组的形状在任何一个维度上都不匹配，那么数组的形状会沿着维度为 1 的维度扩展以匹配另外一个数组的形状。 如果两个数组的形状在任何一个维度上都不匹配并且没有任何一个维度等于 1，那么会引发异常。 例子12345import numpy as npx1 = np.arange(3) + 5x1&gt;&gt;&gt; array([5, 6, 7]) 123456x2 = np.ones((3,3)) + np.arange(3)x2&gt;&gt;&gt; array([[1., 2., 3.], [1., 2., 3.], [1., 2., 3.]]) 123456x3 = np.ones((3,1)) + np.arange(3)x3&gt;&gt;&gt; array([[1., 2., 3.], [1., 2., 3.], [1., 2., 3.]]) 12345678910111213141516171819202122# 2维数组和1维数组相加M = np.ones((2, 3), dtype =int)a = np.arange(3)a&gt;&gt;&gt; array([0, 1, 2])# 数组 a 的维度数更小，所以在其左边补 1：# M.shape -&gt; (2, 3)# a.shape -&gt; (1, 3)# 补了1之后：# M.shape -&gt; (2, 3)# a.shape -&gt; (2, 3)(M + a).shape&gt;&gt;&gt; (2, 3)M + a&gt;&gt;&gt; array([[1, 2, 3], [1, 2, 3]])]]></content>
      <categories>
        <category>数据科学</category>
      </categories>
      <tags>
        <tag>python</tag>
        <tag>numpy</tag>
        <tag>data science</tag>
        <tag>数据科学</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[读书笔记 numpy入门 第3章 聚合函数]]></title>
    <url>%2F2019%2F05%2F23%2F%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0-numpy%E5%85%A5%E9%97%A8-%E7%AC%AC3%E7%AB%A0-%E8%81%9A%E5%90%88%E5%87%BD%E6%95%B0%2F</url>
    <content type="text"><![CDATA[函数名称 NaN安全版本 描述 np.sum np.nansum 计算元素的和 np.prod np.nanprod 计算元素的积 np.mean np.nanmean 计算元素的平均值 np.std np.nanstd 计算元素的标准差 np.var np.nanvar 计算元素的方差 np.min np.nanmin 找出最小值 np.max np.nanmax 找出最大值 np.argmin np.nanargmin 找出最小值的索引 np.argmax np.nanargmax 找出最大值的索引 np.median np.nanmedian 计算元素的中位数 np.percentile np.nanpercentile 计算基于元素排序的统计值 np.any N/A 验证是否存在元素为真 np.all N/A 验证所有元素是否为真 numpy.sum12345&gt;&gt;&gt; np.sum([0.5, 1.5])&gt;&gt;&gt; 2.0&gt;&gt;&gt; np.sum([[0, 1], [0, 5]])&gt;&gt;&gt; 6 numpy.prod12345678&gt;&gt;&gt; np.prod([1.,2.])&gt;&gt;&gt; 2.0&gt;&gt;&gt; np.prod([[1.,2.],[3.,4.]])&gt;&gt;&gt; 24.0&gt;&gt;&gt; np.prod([[1.,2.],[3.,4.]], axis=1)&gt;&gt;&gt; array([ 2., 12.]) numpy.mean123456&gt;&gt;&gt; a = np.array([[1, 2], [3, 4]])&gt;&gt;&gt; np.mean(a)&gt;&gt;&gt; 2.5&gt;&gt;&gt; np.mean(a, axis=1)&gt;&gt;&gt; array([ 1.5, 3.5]) https://github.com/jakevdp/PythonDataScienceHandbook https://docs.scipy.org/doc/]]></content>
      <categories>
        <category>数据科学</category>
      </categories>
      <tags>
        <tag>python</tag>
        <tag>numpy</tag>
        <tag>data science</tag>
        <tag>数据科学</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[读书笔记 numpy入门 第3章 算术运算符]]></title>
    <url>%2F2019%2F05%2F23%2F%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0-numpy%E5%85%A5%E9%97%A8-%E7%AC%AC3%E7%AB%A0-%E7%AE%97%E6%9C%AF%E8%BF%90%E7%AE%97%E7%AC%A6%2F</url>
    <content type="text"><![CDATA[运算符 对应的通用函数 描述 + np.add 加法运算（即 1 + 1 = 2） - np.subtract 减法运算（即 3 - 2 = 1） - np.negative 负数运算（ 即 -2） * np.multiply 乘法运算（即 2 \* 3 = 6） / np.divide 除法运算（即 3 / 2 = 1.5） // np.floor_divide 向下整除运算（floor division，即 3 // 2 = 1） ** np.power 指数运算（即 2 ** 3 = 8） % np.mod 模 / 余数（ 即 9 % 4 = 1） https://github.com/jakevdp/PythonDataScienceHandbook https://docs.scipy.org/doc/]]></content>
      <categories>
        <category>数据科学</category>
      </categories>
      <tags>
        <tag>python</tag>
        <tag>numpy</tag>
        <tag>data science</tag>
        <tag>数据科学</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[读书笔记 numpy入门 第2章 数组分裂]]></title>
    <url>%2F2019%2F05%2F23%2F%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0-numpy%E5%85%A5%E9%97%A8-%E7%AC%AC2%E7%AB%A0-%E6%95%B0%E7%BB%84%E5%88%86%E8%A3%82%2F</url>
    <content type="text"><![CDATA[np.splitSplit an array into multiple sub-arrays 向以上函数传递一个索引列表作为参数，索引列表记录的是分裂点位置： 12345x = [1, 2, 3, 99, 99, 3, 2, 1]x1, x2, x3 = np.split(x, [3, 5])print(x1, x2, x3)&gt;&gt;&gt; [1 2 3] [99 99] [3 2 1] https://docs.scipy.org/doc/numpy/reference/generated/numpy.split.html 参数： ary indices or sections axis 123&gt;&gt;&gt; x = np.arange(9.0)&gt;&gt;&gt; np.split(x, 3)&gt;&gt;&gt; array([ 0., 1., 2.]), array([ 3., 4., 5.]), array([ 6., 7., 8.])] 1234567&gt;&gt;&gt; x = np.arange(8.0)&gt;&gt;&gt; np.split(x, [3, 5, 6, 10])&gt;&gt;&gt;[array([ 0., 1., 2.]), array([ 3., 4.]), array([ 5.]), array([ 6., 7.]), array([], dtype=float64)] np.vsplit和np.hsplitN 分裂点会得到 N + 1 个子数组。 1234567891011121314151617181920212223242526272829grid = np.arange(16).reshape((4, 4))grid&gt;&gt;&gt; array([[ 0, 1, 2, 3], [ 4, 5, 6, 7], [ 8, 9, 10, 11], [12, 13, 14, 15]])upper, lower = np.vsplit(grid, [2])print(upper)print(lower)&gt;&gt;&gt;[[0 1 2 3] [4 5 6 7]] [[ 8 9 10 11] [12 13 14 15]]left, right = np.hsplit(grid, [2])print(left)print(right)&gt;&gt;&gt;[[ 0 1] [ 4 5] [ 8 9] [12 13]] [[ 2 3] [ 6 7] [10 11] [14 15]] https://docs.scipy.org/doc/numpy/reference/generated/numpy.vsplit.html https://docs.scipy.org/doc/numpy/reference/generated/numpy.hsplit.html np.dsplit https://docs.scipy.org/doc/numpy/reference/generated/numpy.split.html 1234&gt;&gt;&gt; x = np.arange(9.0)&gt;&gt;&gt; np.split(x, 3)&gt;&gt;&gt; [array([ 0., 1., 2.]), array([ 3., 4., 5.]), array([ 6., 7., 8.])] 123456789&gt;&gt;&gt; x = np.arange(8.0)&gt;&gt;&gt; np.split(x, [3, 5, 6, 10])&gt;&gt;&gt;[array([ 0., 1., 2.]), array([ 3., 4.]), array([ 5.]), array([ 6., 7.]), array([], dtype=float64)]]]></content>
      <categories>
        <category>数据科学</category>
      </categories>
      <tags>
        <tag>python</tag>
        <tag>numpy</tag>
        <tag>data science</tag>
        <tag>数据科学</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[读书笔记 numpy入门 第2章 数组拼接]]></title>
    <url>%2F2019%2F05%2F23%2F%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0-numpy%E5%85%A5%E9%97%A8-%E7%AC%AC2%E7%AB%A0-%E6%95%B0%E7%BB%84%E6%8B%BC%E6%8E%A5%2F</url>
    <content type="text"><![CDATA[np.concatenate123456789101112# 拼接2个数组x = np.array([1, 2, 3])y = np.array([3, 2, 1])np.concatenate([x, y])&gt;&gt;&gt; array([1, 2, 3, 3, 2, 1])# 拼接3个数组z = [99, 99, 99]print(np.concatenate([x, y, z]))&gt;&gt;&gt; [ 1 2 3 3 2 1 99 99 99] 二维数组拼接12345678910111213141516grid = np.array([[1, 2, 3], [4, 5, 6]])# 沿着第一个轴拼接np.concatenate([grid, grid])&gt;&gt;&gt; array([[1, 2, 3], [4, 5, 6], [1, 2, 3], [4, 5, 6]])# 沿着第二个轴拼接（从0开始索引）np.concatenate([grid, grid], axis=1)&gt;&gt;&gt; array([[1, 2, 3, 1, 2, 3], [4, 5, 6, 4, 5, 6]]) https://docs.scipy.org/doc/numpy/reference/generated/numpy.concatenate.html np.vstack12345678910x = np.array([1, 2, 3])grid = np.array([[9, 8, 7], [6, 5, 4]])# 垂直栈数组np.vstack([x, grid])&gt;&gt;&gt; array([[1, 2, 3], [9, 8, 7], [6, 5, 4]]) https://docs.scipy.org/doc/numpy/reference/generated/numpy.vstack.html np.hstack1234567# 水平栈数组y = np.array([[99], [99]])np.hstack([grid, y])&gt;&gt;&gt; array([[ 9, 8, 7, 99], [ 6, 5, 4, 99]]) https://docs.scipy.org/doc/numpy/reference/generated/numpy.hstack.html np.dstack https://www.numpy.org/devdocs/reference/generated/numpy.dstack.html 沿着第三个维度拼接数组 123456&gt;&gt;&gt; a = np.array((1,2,3))&gt;&gt;&gt; b = np.array((2,3,4))&gt;&gt;&gt; np.dstack((a,b))&gt;&gt;&gt;array([[[1, 2], [2, 3], [3, 4]]])]]></content>
      <categories>
        <category>数据科学</category>
      </categories>
      <tags>
        <tag>python</tag>
        <tag>numpy</tag>
        <tag>data science</tag>
        <tag>数据科学</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[读书笔记 numpy入门 第2章 数组变形]]></title>
    <url>%2F2019%2F05%2F23%2F%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0-numpy%E5%85%A5%E9%97%A8-%E7%AC%AC2%E7%AB%A0-%E6%95%B0%E7%BB%84%E5%8F%98%E5%BD%A2%2F</url>
    <content type="text"><![CDATA[https://github.com/jakevdp/PythonDataScienceHandbook reshape() https://docs.scipy.org/doc/numpy/reference/generated/numpy.reshape.html Gives a new shape to an array without changing its data. 在不改变数据的情况下，进行数组的变形，变成你想要的n行n列。 123456789101112import numpy as npa = np.arange(6)a&gt;&gt;&gt; array([0, 1, 2, 3, 4, 5])b = np.arange(6).reshape((3, 2))b&gt;&gt;&gt; array([[0, 1], [2, 3], [4, 5]]) newaxis() https://stackoverflow.com/questions/29241056/how-does-numpy-newaxis-work-and-when-to-use-it newaxis()可使当前数组的维度增加一个维度（dimension）。 1D array 会变成 2D array 2D array 会变成 3D array 3D array 会变成 4D array 4D array 会变成 5D array 1234567x1 = np.arange(1,10).reshape(3,3)print(x1)# 3行3列&gt;&gt;&gt; array([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) 切片操作中利用newaxis()： 123456789x1_new = x1[:,np.newaxis]print(x1_new)# dimension (3,1,3)&gt;&gt;&gt; array([[[1, 2, 3]], [[4, 5, 6]], [[7, 8, 9]]]) 书上的例子12345678910111213141516171819202122232425x = np.array([1, 2, 3])# 通过变形获得的行向量x.reshape((1, 3))&gt;&gt;&gt; array([[1, 2, 3]])# 通过newaxis获得的行向量x[np.newaxis, :]&gt;&gt;&gt; array([[1, 2, 3]])# 通过变形获得的列向量x.reshape((3, 1))&gt;&gt;&gt; array([[1], [2], [3]])# 通过newaxis获得的列向量x[:, np.newaxis]&gt;&gt;&gt; array([[1], [2], [3]])]]></content>
      <categories>
        <category>数据科学</category>
      </categories>
      <tags>
        <tag>python</tag>
        <tag>numpy</tag>
        <tag>data science</tag>
        <tag>数据科学</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[读书笔记 numpy入门 第2章 数据切片]]></title>
    <url>%2F2019%2F05%2F19%2F%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0%20numpy%E5%85%A5%E9%97%A8%20%E7%AC%AC2%E7%AB%A0%20%E6%95%B0%E6%8D%AE%E5%88%87%E7%89%87%2F</url>
    <content type="text"><![CDATA[切片语法1x[start:stop:step] 如果以上 3 个参数都未指定，那么它们会被分别设置默认值 start=0、stop= 维度的大小（size of dimension）和 step=1。 一维子数组1234567891011121314151617181920212223x = np.arange(10)x&gt;&gt;&gt; array([0, 1, 2, 3, 4, 5, 6, 7, 8, 9])x[:5] # 前五个元素&gt;&gt;&gt; array([0, 1, 2, 3, 4])x[5:] # 索引五之后的元素&gt;&gt;&gt; array([5, 6, 7, 8, 9])x[4:7] # 中间的子数组&gt;&gt;&gt; array([4, 5, 6])x[::2] # 每隔一个元素&gt;&gt;&gt; array([0, 2, 4, 6, 8])x[1::2] # 每隔一个元素，从索引1开始&gt;&gt;&gt; array([1, 3, 5, 7, 9]) 逆序数组1234567x[::-1] # 所有元素，逆序的&gt;&gt;&gt; array([9, 8, 7, 6, 5, 4, 3, 2, 1, 0])x[5::-2] # 从索引5开始每隔一个元素逆序&gt;&gt;&gt; array([5, 3, 1]) 多维子数组12345678910111213141516x2&gt;&gt;&gt; array([[12, 5, 2, 4], [ 7, 6, 8, 8], [ 1, 6, 7, 7]])x2[:2, :3] # 两行，三列&gt;&gt;&gt; array([[12, 5, 2], [ 7, 6, 8]])x2[:3, ::2] # 所有行，每隔一列&gt;&gt;&gt; array([[12, 2], [ 7, 8], [ 1, 7]]) 逆序数组12345x2[::-1, ::-1]&gt;&gt;&gt; array([[ 7, 7, 6, 1], [ 8, 8, 6, 7], [ 4, 2, 5, 12]]) 获取数组的行和列一个冒号（:）表示空切片 1234567891011print(x2[:, 0]) # x2的第一列&gt;&gt;&gt; [12 7 1]print(x2[0, :]) # x2的第一行&gt;&gt;&gt; [12 5 2 4]print(x2[0]) #等于x2[0, :]&gt;&gt;&gt; [12 5 2 4] 非副本视图的子数组数组切片返回的是数组数据的视图，而不是数值数据的副本。这一点也是 NumPy 数组切片和 Python 列表切片的不同之处：在 Python 列表中，切片是值的副本。 1234567891011121314151617181920212223242526print(x2)&gt;&gt;&gt; [[12 5 2 4] [ 7 6 8 8] [ 1 6 7 7]] # 从中抽取一个 2×2 的子数组x2_sub = x2[:2, :2]print(x2_sub)&gt;&gt;&gt;[[12 5] [ 7 6]]# 现在如果修改这个子数组，将会看到原始数组也被修改了x2_sub[0, 0] = 99print(x2_sub)&gt;&gt;&gt; [[99 5] [ 7 6]]print(x2)&gt;&gt;&gt; [[99 5 2 4] [ 7 6 8 8] [ 1 6 7 7]] 创建数组的副本copy()函数 12345678910111213141516171819x2_sub_copy = x2[:2, :2].copy()print(x2_sub_copy)&gt;&gt;&gt; [[99 5] [ 7 6]] # 如果修改这个子数组，原始的数组不会被改变x2_sub_copy[0, 0] = 42print(x2_sub_copy)&gt;&gt;&gt; [[42 5] [ 7 6]]print(x2)&gt;&gt;&gt;[[99 5 2 4] [ 7 6 8 8] [ 1 6 7 7]]]]></content>
      <categories>
        <category>数据科学</category>
      </categories>
      <tags>
        <tag>python</tag>
        <tag>numpy</tag>
        <tag>data science</tag>
        <tag>数据科学</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[读书笔记 numpy入门 第2章 数据索引]]></title>
    <url>%2F2019%2F05%2F19%2F%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0%20numpy%E5%85%A5%E9%97%A8%20%E7%AC%AC2%E7%AB%A0%20%E6%95%B0%E6%8D%AE%E7%B4%A2%E5%BC%95%2F</url>
    <content type="text"><![CDATA[https://github.com/jakevdp/PythonDataScienceHandbook 一维数组里进行索引123456789101112131415161718192021222324import numpy as npnp.random.seed(0)x1 = np.random.randint(10, size=6) # 一维数组x2 = np.random.randint(10, size=(3, 4)) # 二维数组x3 = np.random.randint(10, size=(3, 4, 5)) # 三维数组x1&gt;&gt;&gt; array([5, 0, 3, 3, 7, 9])x1[0]&gt;&gt;&gt; 5x1[4] &gt;&gt;&gt; 7x1[-1]&gt;&gt;&gt; 9x1[-2]&gt;&gt;&gt; 7 多维数组里进行索引1234567891011121314151617181920x2&gt;&gt;&gt; array([[3, 5, 2, 4], [7, 6, 8, 8], [1, 6, 7, 7]])x2[0, 0]&gt;&gt;&gt; 3x2[2, 0]&gt;&gt;&gt; 1x2[2, -1]&gt;&gt;&gt; 7x2[0, 0] = 12x2&gt;&gt;&gt; array([[12, 5, 2, 4], [ 7, 6, 8, 8], [ 1, 6, 7, 7]]) 修改浮点数如果把x1的位置0元素改为浮点数，那结果会被截短成整型。 1234x1[0] = 3.14159x1&gt;&gt;&gt; array([3, 0, 3, 3, 7, 9])]]></content>
      <categories>
        <category>数据科学</category>
      </categories>
      <tags>
        <tag>python</tag>
        <tag>numpy</tag>
        <tag>data science</tag>
        <tag>数据科学</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[读书笔记 numpy入门 第2章 数据属性]]></title>
    <url>%2F2019%2F05%2F19%2F%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0%20numpy%E5%85%A5%E9%97%A8%20%E7%AC%AC2%E7%AB%A0%20%E6%95%B0%E6%8D%AE%E5%B1%9E%E6%80%A7%2F</url>
    <content type="text"><![CDATA[https://github.com/jakevdp/PythonDataScienceHandbook NumPy数组的属性 ndim 数组的维度 shape 数组每个维度的大小 size 数组的总大小 dtype 数组的数据类型 itemsize 每个数组元素字节的大小 nbytes 数组总字节大小的属性 用例子体会123456789101112131415161718192021222324import numpy as npnp.random.seed(0)x1 = np.random.randint(10, size=6) # 一维数组x2 = np.random.randint(10, size=(3, 4)) # 二维数组x3 = np.random.randint(10, size=(3, 4, 5)) # 三维数组print("x3 ndim: ", x3.ndim)print("x3 shape:", x3.shape)print("x3 size: ", x3.size)&gt;&gt;&gt; x3 ndim: 3&gt;&gt;&gt; x3 shape: (3, 4, 5)&gt;&gt;&gt; x3 size: 60print("dtype:", x3.dtype)&gt;&gt;&gt;dtype: int64print("itemsize:", x3.itemsize, "bytes")print("nbytes:", x3.nbytes, "bytes")&gt;&gt;&gt; itemsize: 8 bytes&gt;&gt;&gt; nbytes: 480 bytes]]></content>
      <categories>
        <category>数据科学</category>
      </categories>
      <tags>
        <tag>python</tag>
        <tag>numpy</tag>
        <tag>data science</tag>
        <tag>数据科学</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[读书笔记 numpy入门 第1章 创建数组方法和数据类型]]></title>
    <url>%2F2019%2F05%2F19%2F%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0%20numpy%E5%85%A5%E9%97%A8%20%E7%AC%AC1%E7%AB%A0%20%E5%88%9B%E5%BB%BA%E6%95%B0%E7%BB%84%E6%96%B9%E6%B3%95%E5%92%8C%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%2F</url>
    <content type="text"><![CDATA[https://github.com/jakevdp/PythonDataScienceHandbook 从头创建数组用 NumPy 内置的方法从头创建数组。 创建一个长度为10的数组，数组的值都是0 1234import numpy as npnp.zeros(10, dtype=int)# output: array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0]) 创建一个3×5的浮点型数组，数组的值都是1 123456np.ones((3, 5), dtype=float)# output# array([[1., 1., 1., 1., 1.],# [1., 1., 1., 1., 1.],# [1., 1., 1., 1., 1.]]) 创建一个3×5的浮点型数组，数组的值都是3.14 123456np.full((3, 5), 3.14)#output# array([[3.14, 3.14, 3.14, 3.14, 3.14],# [3.14, 3.14, 3.14, 3.14, 3.14],# [3.14, 3.14, 3.14, 3.14, 3.14]]) 创建一个线性序列数组，从0开始，到20结束，步长为2。（它和内置的range()函数类似） 123np.arange(0, 20, 2)#output: array([ 0, 2, 4, 6, 8, 10, 12, 14, 16, 18]) 创建一个5个元素的数组，这5个数均匀地分配到0~1 123np.linspace(0, 1, 5)#output: array([0. , 0.25, 0.5 , 0.75, 1. ]) 创建一个3×3的、在0~1均匀分布的随机数组成的数组 123456np.random.random((3, 3))#output#array([[0.94795687, 0.62658297, 0.4240733 ],# [0.75686519, 0.46357097, 0.58682988],# [0.37997183, 0.28707067, 0.67190137]]) 创建一个3×3的、均值为0、标准差为1的，正态分布的随机数数组 123456np.random.normal(0, 1, (3, 3))#output#array([[ 0.1348332 , -1.93013655, 1.21003072],# [ 1.41562771, 0.29064906, 1.09749629],# [-0.16664035, -0.67962834, -0.54942727]]) 创建一个3×3的、[0, 10)区间的随机整型数组 123456np.random.randint(0, 10, (3, 3))#output#array([[8, 0, 5],# [6, 5, 9],# [9, 9, 0]]) 创建一个3×3的单位矩阵 123456np.eye(3)#output#array([[1., 0., 0.],# [0., 1., 0.],# [0., 0., 1.]]) 创建一个由3个整型数组成的未初始化的数组，数组的值是内存空间中的任意值 123np.empty(3)#output: array([1., 1., 1.]) NumPy标准数据类型构建数组时，可以用以下2种方式指定数据类型： 用字符串参数 123np.zeros(10, dtype='int16')#output: array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0], dtype=int16) 用相关NumPy对象来指定 123np.zeros(10, dtype=np.int16)#output: array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0], dtype=int16) NumPy标准数据类型表格： http://numpy.org/ 数据类型 描述 bool_ 布尔值（真、True 或假、False），用一个字节存储 int_ 默认整型（类似于 C 语言中的 long，通常情况下是 int64 或 int32） intc 同 C 语言的 int 相同（通常是 int32 或 int64） intp 用作索引的整型（和 C 语言的 ssize_t 相同，通常情况下是 int32 或 int64） int8 字节（byte，范围从–128 到 127） int16 整型（范围从–32768 到 32767） int32 整型（范围从–2147483648 到 2147483647） int64 整型（范围从–9223372036854775808 到 9223372036854775807） uint8 无符号整型（范围从 0 到 255） uint16 无符号整型（范围从 0 到 65535） uint32 无符号整型（范围从 0 到 4294967295） uint64 无符号整型（范围从 0 到 18446744073709551615） float_ float64 的简化形式 float16 半精度浮点型：符号比特位，5 比特位指数（exponent），10 比特位尾数（mantissa） float32 单精度浮点型：符号比特位，8 比特位指数，23 比特位尾数 float64 双精度浮点型：符号比特位，11 比特位指数，52 比特位尾数 complex_ complex128 的简化形式 complex64 复数，由两个 32 位浮点数表示 complex128 复数，由两个 64 位浮点数表示]]></content>
      <categories>
        <category>数据科学</category>
      </categories>
      <tags>
        <tag>python</tag>
        <tag>numpy</tag>
        <tag>data science</tag>
        <tag>数据科学</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[读书笔记 numpy入门 第1章 python的特殊]]></title>
    <url>%2F2019%2F05%2F19%2F%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0%20numpy%E5%85%A5%E9%97%A8%20%E7%AC%AC1%E7%AB%A0%20python%E7%9A%84%E7%89%B9%E6%AE%8A%2F</url>
    <content type="text"><![CDATA[https://github.com/jakevdp/PythonDataScienceHandbook Numpy入门Numerical Python，提供了高效存储和操作密集数据缓存的接口。 导入Numpy 1import numpy as np 理解Python中的数据类型学习数据科学，我们要理解数据是如何被储存和操作的。 python易用性-动态输入静态类型的语言（如 C 或 Java）往往需要每一个变量都明确地声明， 而动态类型的语言（例如 Python）可以跳过这个特殊规定。 Python整型不仅仅是一个整型Python 3.4 中的一个整型实际上包括 4 个部分。 ob_refcnt 是一个引用计数，它帮助 Python 默默地处理内存的分配和回收。 ob_type 将变量的类型编码。 ob_size 指定接下来的数据成员的大小。 ob_digit 包含我们希望 Python 变量表示的实际整型值。 Python列表不仅仅是一个列表整型值列表 123456789101112L = list (range(10))print(L)# output: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]type(L)# output:listtype(L[0])# output:int 字符串列表 123456789L2 = [str(c) for c in L]print(L2)# output: ['0', '1', '2', '3', '4', '5', '6', '7', '8', '9']type(L2[0])# output: str 异构列表 1234L3 = [True, "2", 3.0, 4][type(item) for item in L3]# output: [bool, str, float, int] Python中的固定类型数组array模块创建统一类型的密集数组 12345678import arrayL = list(range(10))print(L)A = array.array('i', L)A# output: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]# array('i', [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]) 从Python列表创建数组NumPy 要求数组必须包含同一类型的数据。 123456# 导入Numpyimport numpy as np# 创建数组np.array([1, 4, 2, 5, 3])#output: array([1, 4, 2, 5, 3]) 如果数据类型不匹配，Numpy向上转换： 12345import numpy as npnp.array([3.14, 4, 2, 3])# 整型int转换为浮点型float# output: array([3.14, 4. , 2. , 3. ]) 也可以用dtype关键词去设置数组的数据类型： 1234import numpy as npnp.array([1, 2, 3, 4], dtype='float32')# output: array([1., 2., 3., 4.], dtype=float32) 多维数组： 12345678# 嵌套列表构成的多维数组import numpy as npnp.array([range(i, i + 3) for i in [2, 4, 6]])#output#array([[2, 3, 4],# [4, 5, 6],# [6, 7, 8]])]]></content>
      <categories>
        <category>数据科学</category>
      </categories>
      <tags>
        <tag>python</tag>
        <tag>numpy</tag>
        <tag>data science</tag>
        <tag>数据科学</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[numpy.random.seed使用方法]]></title>
    <url>%2F2019%2F05%2F19%2Fnumpy-random-seed%E4%BD%BF%E7%94%A8%E6%96%B9%E6%B3%95%2F</url>
    <content type="text"><![CDATA[https://www.sharpsightlabs.com/blog/numpy-random-seed/ PSEUDO-RANDOM NUMBER首先提一下 “pseudo-random number”（伪随机数），它不是真正的随机，而是用确定性的算法计算出来的均匀分布随机数序列。 https://zh.wikipedia.org/zh-hans/%E4%BC%AA%E9%9A%8F%E6%9C%BA%E6%80%A7 那因为伪随机数是确定的，所以它们是可重复的（repeatable）。 seed的结果1234np.random.seed(0)np.random.randint(10, size = 5)&gt;&gt;&gt; array([5, 0, 3, 3, 7]) 如果你把以上代码再重复run一次，会发现结果是一样的。 numpy.random.seed函数会把 输出 （ seed value）传给那个在numpy里产生伪随机数的算法。 搭配numpy.random.seed经常和numpy.random.randint一起使用。 THE SYNTAX OF NUMPY RANDOM SEED只有一个参数，那就是seed value。]]></content>
      <categories>
        <category>数据科学</category>
      </categories>
      <tags>
        <tag>python</tag>
        <tag>numpy</tag>
        <tag>data science</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[numpy.empty使用方法]]></title>
    <url>%2F2019%2F05%2F19%2Fnumpy-empty%E4%BD%BF%E7%94%A8%E6%96%B9%E6%B3%95%2F</url>
    <content type="text"><![CDATA[https://www.runoob.com/numpy/numpy-array-creation.html https://docs.scipy.org/doc/numpy/reference/generated/numpy.empty.html numpy.emptyReturn a new array of given shape and type, without initializing entries. 返回 一个指定形状（shape）、数据类型（dtype）且未初始化的数组。 参数 shape dtype order 例子1234import numpy as npnp.empty(4)# array([1., 0., 0., 1.]) 1234np.empty([2, 2])# array([[1., 0.],# [0., 1.]]) 12345np.empty([3, 2], dtype=int)# array([[-618601952, 346],# [ 0, 0],# [ 1, 0]])]]></content>
      <categories>
        <category>数据科学</category>
      </categories>
      <tags>
        <tag>python</tag>
        <tag>numpy</tag>
        <tag>data science</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[numpy.eye使用方法]]></title>
    <url>%2F2019%2F05%2F19%2Fnumpy-eye%E4%BD%BF%E7%94%A8%E6%96%B9%E6%B3%95%2F</url>
    <content type="text"><![CDATA[https://docs.scipy.org/doc/numpy/reference/generated/numpy.eye.html https://www.numpy.org.cn/article/basics/different_ways_create_numpy_arrays.html#%E4%BD%BF%E7%94%A8%E5%85%B6%E4%BB%96Numpy%E5%87%BD%E6%95%B0 https://www.programcreek.com/python/example/6118/numpy.eye 对角矩阵Return a 2-D array with ones on the diagonal and zeros elsewhere. 返回一个 对角线是1，其余是0的 2维数组。 参数 N （行） M （列） K （Index of the diagonal: 0 (the default) refers to the main diagonal, a positive value refers to an upper diagonal, and a negative value to a lower diagonal） dtype 数据类型 order （Whether the output should be stored in row-major (C-style) or column-major (Fortran-style) order in memory） 例子N+dtype12345import numpy as npnp.eye(2, dtype=int)#array([[1, 0],# [0, 1]]) 12345np.eye(3, dtype=int)#array([[1, 0, 0],# [0, 1, 0],# [0, 0, 1]]) 123456np.eye(4, dtype=int)#array([[1, 0, 0, 0],# [0, 1, 0, 0],# [0, 0, 1, 0],# [0, 0, 0, 1]]) N+M1234np.eye(2, 2)#array([[1., 0.],# [0., 1.]]) 12345np.eye(3, 6)#array([[1., 0., 0., 0., 0., 0.],# [0., 1., 0., 0., 0., 0.],# [0., 0., 1., 0., 0., 0.]]) N+K12345np.eye(3, k=1)#array([[0., 1., 0.],# [0., 0., 1.],# [0., 0., 0.]]) 123456np.eye(4, k=1)#array([[0., 1., 0., 0.],# [0., 0., 1., 0.],# [0., 0., 0., 1.],# [0., 0., 0., 0.]])]]></content>
      <categories>
        <category>数据科学</category>
      </categories>
      <tags>
        <tag>python</tag>
        <tag>numpy</tag>
        <tag>data science</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[numpy.random.randint使用方法]]></title>
    <url>%2F2019%2F05%2F19%2Fnumpy-random-randint%E4%BD%BF%E7%94%A8%E6%96%B9%E6%B3%95%2F</url>
    <content type="text"><![CDATA[https://docs.scipy.org/doc/numpy-1.16.1/reference/generated/numpy.random.randint.html https://blog.csdn.net/tintinetmilou/article/details/79854725 https://www.programcreek.com/python/example/55590/numpy.random.randint https://www.tutorialspoint.com/How-to-use-Python-Numpy-to-generate-Random-Numbers https://segmentfault.com/a/1190000016097466 https://zhuanlan.zhihu.com/p/26889091 random.randintnumpy.random.randint可以创建范围是[low, high]之间的随机整数数组。 有以下几种参数： low high size dtype 来用例子学习吧！ 指定Low+high创建随机整数数组，返回[1, 10]之间的整数： 12import numpy as npnp.random.randint(low = 1, high = 10, dtype=int) 结果只会是1~9。 不指定high12import numpy as npnp.random.randint(low = 1, dtype=int) 不指定high参数，结果只是0。也就是当我们不指定high参数时，low参数的值是数组里的最大范围。 12import numpy as npnp.random.randint(low = 5, dtype=int) 这个的结果只是0~4。证明了low参数的值是数组里的最大范围。 指定size1234import numpy as npnp.random.randint(low = 3, size = 1)# 结果是 array([0/1/2]) 1234import numpy as npnp.random.randint(low = 3, size = 2)# 结果是 array([0~2, 0~2]) 12345import numpy as npnp.random.randint(low = 5, size = (2, 2))# 结果是 array([[0~4, 0~4],# [0~4, 0~4]]) 只指定size123&gt;&gt;&gt; np.random.randint(2, size=10)&gt;&gt;&gt; array([1, 0, 0, 0, 1, 1, 0, 0, 1, 0]) 123&gt;&gt;&gt; np.random.randint(1, size=10)&gt;&gt;&gt; array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0]) 1234&gt;&gt;&gt; np.random.randint(5, size=(2, 4))&gt;&gt;&gt; array([[4, 0, 2, 1], [3, 2, 2, 0]]) 没有明确指定12345&gt;&gt;&gt; np.random.randint(1, 5)# 返回[1, 5)之间随机的一个数字 &gt;&gt;&gt; 0~4]]></content>
      <categories>
        <category>数据科学</category>
      </categories>
      <tags>
        <tag>python</tag>
        <tag>numpy</tag>
        <tag>data science</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[numpy.random使用方法]]></title>
    <url>%2F2019%2F05%2F19%2Fnumpy-random%E4%BD%BF%E7%94%A8%E6%96%B9%E6%B3%95%2F</url>
    <content type="text"><![CDATA[https://www.sharpsightlabs.com/blog/numpy-random-normal/ Normal distrubutionThe NumPy random normal function generates a sample of numbers drawn from the normal distribution（正态分布、常态分布）, otherwise called the Gaussian distribution（高斯分布）. 参考链接：维基百科 NUMPY RANDOM NORMAL GENERATES NORMALLY DISTRIBUTED NUMBERSrandom normal函数可以让你创建一个包含正态分布数据的numpy数组。 下图是我们用直方图绘制数据： 正态分布数据，就像bell（钟、铃铛），所以经常被称为“钟形曲线”。 接下来我们看看语法。 THE SYNTAX OF NUMPY RANDOM NORMAL不要忘了导入模块： 1import numpy as np np.random.normal()函数有3个参数： loc scale size THE PARAMETERS OF THE NP.RANDOM.NORMAL FUNCTIONloc：控制函数的平均值（Mean），默认值是0。 scale：控制正态分布的标准偏差，默认值是1。 size：控制输出的大小和形状。 If you provide a single integer, x, np.random.normal will provide x random normal values in a 1-dimensional NumPy array. 如果 size = x，那np.random.normal函数就会提供一个有x个正态分布数值的1维numpy数组。 For example, if you specify size = (2, 3), np.random.normal will produce a numpy array with 2 rows and 3 columns. It will be filled with numbers drawn from a random normal distribution. 例如，你指定 size = (2, 3)，那就会产生一个2行3列的numpy数组。 THE NP.RANDOM.RANDN FUNCTION还有一个类似的函数：np.random.randn()。 这个代码： 12np.random.seed(1)np.random.normal(loc = 0, scale = 1, size = (3,3)) 等于下面这个： 12np.random.seed(1)np.random.randn(3, 3) EXAMPLES: HOW TO USE THE NUMPY RANDOM NORMAL FUNCTIONDRAW A SINGLE NUMBER FROM THE NORMAL DISTRIBUTION123np.random.normal(1)# 等于： np.random.normal(size = 1, loc = 0, scale = 1) DRAW 5 NUMBERS FROM THE NORMAL DISTRIBUTION1np.random.normal(5) CREATE A 2-DIMENSIONAL NUMPY ARRAY OF NORMALLY DISTRIBUTED VALUES12345np.random.seed(42)np.random.normal(size = (2, 3))#array([[ 1.62434536, -0.61175641, -0.52817175],# [-1.07296862, 0.86540763, -2.3015387 ]]) GENERATE NORMALLY DISTRIBUTED VALUES WITH A SPECIFIC MEAN1234567np.random.seed(42)np.random.normal(size = 1000, loc = 50)# array([ 50.49671415, 49.8617357 , 50.64768854, 51.52302986,# 49.76584663, 49.76586304, 51.57921282, 50.76743473,# 49.53052561, 50.54256004, 49.53658231, 49.53427025 # ... GENERATE NORMALLY DISTRIBUTED VALUES WITH A SPECIFIC STANDARD DEVIATION1234567np.random.seed(42)np.random.normal(size = 1000, scale = 100)#array([ 4.96714153e+01, -1.38264301e+01, 6.47688538e+01,# 1.52302986e+02, -2.34153375e+01, -2.34136957e+01,# 1.57921282e+02, 7.67434729e+01, -4.69474386e+01# ... 我们可以用std()方法去计算标准偏差： 1234np.random.seed(42)np.random.normal(size = 1000, scale = 100).std()# 99.695552529463015 HOW TO USE THE LOC AND SCALE PARAMETER IN NP.RANDOM.NORMAL12np.random.seed(42)np.random.normal(size = 1000, loc = 50, scale = 100) numpy.random.normal https://docs.scipy.org/doc/numpy/reference/generated/numpy.random.normal.html]]></content>
      <categories>
        <category>数据科学</category>
      </categories>
      <tags>
        <tag>python</tag>
        <tag>numpy</tag>
        <tag>data science</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[numpy.linspace使用方法]]></title>
    <url>%2F2019%2F05%2F19%2Fnumpy-linspace%E4%BD%BF%E7%94%A8%E6%96%B9%E6%B3%95%2F</url>
    <content type="text"><![CDATA[Numpy refer https://docs.scipy.org/doc/numpy/reference/generated/numpy.linspace.html numpy.linspace(start, stop, num=50, endpoint=True, retstep=False, dtype=None, axis=0) Parameters start : array_like The starting value of the sequence. 序列的初始值。 stop : array_like The end value of the sequence, unless endpoint is set to False. In that case, the sequence consists of all but the last of num + 1 evenly spaced samples, so that stop is excluded. Note that the step size changes when endpoint is False. num : int, optional Number of samples to generate. Default is 50. Must be non-negative. 默认值是50，必须是非负数。 endpoint : bool, optional If True, stop is the last sample. Otherwise, it is not included. Default is True. retstep : bool, optional If True, return (samples, step), where step is the spacing between samples. dtype : dtype, optional The type of the output array. If dtype is not given, infer the data type from the other input arguments. axis : int, optional The axis in the result to store the samples. Relevant only if start or stop are array-like. By default (0), the samples will be along a new axis inserted at the beginning. Use -1 to get an axis at the end. Returns samples : ndarray There are num equally spaced samples in the closed interval [start, stop] or the half-open interval [start, stop) (depending on whether endpoint is True or False). step : float, optional Only returned if retstep is True Size of spacing between samples. 例子12345678&gt;&gt;&gt; np.linspace(2.0, 3.0, num=5)array([ 2. , 2.25, 2.5 , 2.75, 3. ])&gt;&gt;&gt; np.linspace(2.0, 3.0, num=5, endpoint=False)array([ 2. , 2.2, 2.4, 2.6, 2.8])&gt;&gt;&gt; np.linspace(2.0, 3.0, num=5, retstep=True)(array([ 2. , 2.25, 2.5 , 2.75, 3. ]), 0.25) Graphical illustration: 1234567891011121314&gt;&gt;&gt; import matplotlib.pyplot as plt&gt;&gt;&gt; N = 8&gt;&gt;&gt; y = np.zeros(N)&gt;&gt;&gt; x1 = np.linspace(0, 10, N, endpoint=True)&gt;&gt;&gt; x2 = np.linspace(0, 10, N, endpoint=False)&gt;&gt;&gt; plt.plot(x1, y, 'o')[&lt;matplotlib.lines.Line2D object at 0x...&gt;]&gt;&gt;&gt; plt.plot(x2, y + 0.5, 'o')[&lt;matplotlib.lines.Line2D object at 0x...&gt;]&gt;&gt;&gt; plt.ylim([-0.5, 1])(-0.5, 1)&gt;&gt;&gt; plt.show() Numpy sharpsightlab https://www.sharpsightlabs.com/blog/numpy-linspace/ 先看个简单的例子： 1np.linspace(start = 0, stop = 100, num = 5) 看这张图可能更加好理解： 可以看出，在我们指定的范围内（从0开始，100为结束），有5个元素（0、25、50、75、100）。 另外，如果指定endpoint = False，那100这个值就不包括在内。num在这里我们指定的是5，如果没有指定，那默认值是50。 这张图里有3个参数，分别是start、stop、num。这会是我们很常用的参数。 OK，接下来我们看看默认写法是怎么样的： 1np.linspace(0, 100, 5) 相当于： 1np.linspace(start = 0, stop = 100, num = 5) 例子123&gt;&gt;&gt; np.linspace(start = 0, stop = 1, num = 11)&gt;&gt;&gt; array([ 0. , 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1. ]) 123&gt;&gt;&gt; np.linspace(start = 0, stop = 100, num = 11)&gt;&gt;&gt; array([ 0., 10., 20., 30., 40., 50., 60., 70., 80., 90., 100.]) 123&gt;&gt;&gt; np.linspace(start = 1, stop = 5, num = 4, endpoint = False)&gt;&gt;&gt; array([ 1., 2., 3., 4.]) 123&gt;&gt;&gt; np.linspace(start = 0, stop = 100, num = 5, dtype = int)&gt;&gt;&gt; array([ 0, 25, 50, 75, 100])]]></content>
      <categories>
        <category>数据科学</category>
      </categories>
      <tags>
        <tag>python</tag>
        <tag>numpy</tag>
        <tag>data science</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[numpy.full使用方法]]></title>
    <url>%2F2019%2F05%2F19%2Fnumpy-full%E4%BD%BF%E7%94%A8%E6%96%B9%E6%B3%95%2F</url>
    <content type="text"><![CDATA[full函数 用确定的数值创建数组1&gt;&gt;&gt; np.full((n行, n列), value) 例子123&gt;&gt;&gt; np.full((2, 2), 10)&gt;&gt;&gt; array([[10, 10], [10, 10]]) 1234&gt;&gt;&gt;np.full((2,2), 3)&gt;&gt;&gt;array([[3, 3], [3, 3]]) 1234&gt;&gt;&gt; np.full((3, 5), 7)&gt;&gt;&gt;array([[ 7., 7., 7., 7., 7.], [ 7., 7., 7., 7., 7.], [ 7., 7., 7., 7., 7.]]) 1234&gt;&gt;&gt; np.full((3, 5), 7, dtype=int)&gt;&gt;&gt;array([[7, 7, 7, 7, 7], [7, 7, 7, 7, 7], [7, 7, 7, 7, 7]]) https://github.com/jakevdp/PythonDataScienceHandbook 创建一个3×5的浮点型数组，数组的值都是3.14： 123456np.full((3, 5), 3.14)#output# array([[3.14, 3.14, 3.14, 3.14, 3.14],# [3.14, 3.14, 3.14, 3.14, 3.14],# [3.14, 3.14, 3.14, 3.14, 3.14]])]]></content>
      <categories>
        <category>数据科学</category>
      </categories>
      <tags>
        <tag>python</tag>
        <tag>numpy</tag>
        <tag>data science</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[numpy.arange使用方法]]></title>
    <url>%2F2019%2F05%2F19%2Fnumpy-arange%E4%BD%BF%E7%94%A8%E6%96%B9%E6%B3%95%2F</url>
    <content type="text"><![CDATA[https://www.sharpsightlabs.com/blog/numpy-arange/ The NumPy arange function returns evenly spaced numeric values within an interval, stored as a NumPy array (i.e., an ndarray object). arrange()函数可以生成等间隔的数值。 1numpy.arange(5) 创建了从0到4的5个等间隔的数值。 继续往下走。 使用arange()函数时，我们有4个参数可以用。 start 指定数值的开头 stop 指定末尾，这个数值不会被包括在结果里 step 数值之间的间隔 dtype 数据类型 来看例子体会吧 先导入模块1import numpy as np 创一个简单的1np.arange(stop = 5) 我们没有指定start，所以数组的开头是“0”。接下来，“stop = 5”指定了停止数值为5，到5就结束了，不包含5。 同样地，由于我们没有指定 “step”，默认间隔为”1“。最后，因为5是整数，尽管我们没有指定数据类型，python默认用5的数据类型，也就是整数(int)作为数组的数据类型。 1np.arange(5) 另外，如果我们没有指定参数名，会默认是”stop“。 创间隔为2的创建从0到8，增数为2： 1np.arange(start = 0, stop = 8, step = 2) 指定数据类型1np.arange(start = 1, stop = 5, dtype = 'float') 创建2维数组需要搭配方法reshape。 先别急，我们先看看这个： 从1到9的1维数组 1np.arange(start = 1, stop = 10, step = 1) 再看这个，使用方法reshape()： 1np.arange(start = 1, stop = 10, step = 1).reshape((3,3)) 可以看到，使用了reshape()方法后，变成了3行3列的2维数组（a 2-dimensional array）。]]></content>
      <categories>
        <category>数据科学</category>
      </categories>
      <tags>
        <tag>python</tag>
        <tag>numpy</tag>
        <tag>data science</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[numpy.ones使用方法]]></title>
    <url>%2F2019%2F05%2F19%2Fnumpy-ones%E4%BD%BF%E7%94%A8%E6%96%B9%E6%B3%95%2F</url>
    <content type="text"><![CDATA[https://docs.scipy.org/doc/numpy-1.16.1/reference/generated/numpy.ones.html?highlight=ones numpy.ones(shape, dtype=None, order=’C’) Return a new array of given shape and type, filled with ones. 例子12&gt;&gt;&gt; np.ones(5)array([ 1., 1., 1., 1., 1.]) 12&gt;&gt;&gt; np.ones((5,), dtype=int)array([1, 1, 1, 1, 1]) 123&gt;&gt;&gt; np.ones((2, 1))array([[ 1.], [ 1.]]) 1234&gt;&gt;&gt; s = (2,2)&gt;&gt;&gt; np.ones(s)array([[ 1., 1.], [ 1., 1.]])]]></content>
      <categories>
        <category>数据科学</category>
      </categories>
      <tags>
        <tag>python</tag>
        <tag>numpy</tag>
        <tag>data science</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[numpy.zeros使用方法]]></title>
    <url>%2F2019%2F05%2F19%2Fnumpy-zeros%E4%BD%BF%E7%94%A8%E6%96%B9%E6%B3%95%2F</url>
    <content type="text"><![CDATA[https://www.sharpsightlabs.com/blog/numpy-zeros-python/ 快速回顾numpy array A NumPy array is basically like a container that holds numeric data that’s all of the same data type. I’m simplifying things a little, but that’s the essence of them. We can create a very simple NumPy array as follows: Numpy数组就像是一个容器，里面装着相同数据类型的数据。我们可以这样创建数组： 123import numpy as npnp.array([[1,2,3,4,5,6],[7,8,9,10,11,12]]) 我们创建了一个拥有2行6列的二维数组。所有数据都是整数（integers）。记住，在numpy的数组里，所有数据都必须是相同的数据类型。 当然数组可以是更加复杂的三维数组或者N维数组。 创建空的数组Arrays我们可以用Numpy array()函数创建一个空的，全是数字0的数组。 1np.array([[0,0,0],[0,0,0]]) 如果你需要创建更加大的多维数组，效率就不够高了： 123np.array([[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]]) 别怕，我们可以用 Numpy reshape()方法： 1np.zeros(90).reshape((3,30)) 这个方法也不是很好，我们有更好的。 走，去看 zeros函数！ Zeros函数语法这个函数可以让你创建只有0的数组。 更重要地，这个函数可以让你指定数组的维度（dimensions）。也可以让你指定数据类型。 Then inside the zeros() function, there is a set of arguments. The first positional argument is a tuple of values that specifies the dimensions of the new array. Next, there’s an argument that enables you to specify the data type. If you don’t specify a data type, np.zeros() will use floats by default. 可以简单地看成，np.zeros(shape = (n行, m列), dtype = 数据类型)。如果不指定数据类型，会默认为floats。 例子例子1有5个0，1维数组 1np.zeros(5) 那我们可以看到数组里有5个元素，都是0。并且都是浮点数。 例子2用 dtype 指定数据类型，整数(int)。 1np.zeros(3, dtype = int) 还可以用dtype测试下数据的类型是不是整数int： 123&gt;&gt;&gt; np.zeros(3, dtype = int).dtype&gt;&gt;&gt; dtype('int64') 例子3指定shape： 1np.zeros(shape = (2, 3)) 也可以写成这样： 1np.zeros((2, 3)) 例子4指定shape和dtype： 1np.zeros(shape = (3, 5), dtype = 'int') 我们创建了一个3行5列的都是0的矩阵。 例子5接下来我们可以试试更加大的数组： 1np.zeros(shape = (3, 3, 5), dtype = 'int') https://docs.scipy.org/doc/ https://www.numpy.org/devdocs/reference/generated/numpy.zeros.html?highlight=zeros numpy.zeros(shape, dtype=float, order=’C’) Return a new array of given shape and type, filled with zeros. Parametersshape : int or tuple of ints Shape of the new array, e.g., (2, 3) or 2. dtype : data-type, optional The desired data-type for the array, e.g., numpy.int8. Default is numpy.float64. order : {‘C’, ‘F’}, optional, default: ‘C’ Whether to store multi-dimensional data in row-major (C-style) or column-major (Fortran-style) order in memory. Returnsout : ndarray Array of zeros with the given shape, dtype, and order. 例子12&gt;&gt;&gt; np.zeros(5)array([ 0., 0., 0., 0., 0.]) 12&gt;&gt;&gt; np.zeros((5,), dtype=int)array([0, 0, 0, 0, 0]) 123&gt;&gt;&gt; np.zeros((2, 1))array([[ 0.], [ 0.]]) 1234&gt;&gt;&gt; s = (2,2)&gt;&gt;&gt; np.zeros(s)array([[ 0., 0.], [ 0., 0.]]) 123&gt;&gt;&gt; np.zeros((2,), dtype=[('x', 'i4'), ('y', 'i4')]) # custom dtypearray([(0, 0), (0, 0)], dtype=[('x', '&lt;i4'), ('y', '&lt;i4')])]]></content>
      <categories>
        <category>数据科学</category>
      </categories>
      <tags>
        <tag>python</tag>
        <tag>numpy</tag>
        <tag>data science</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[hexo + NextT主题配置快速教程]]></title>
    <url>%2F2019%2F05%2F17%2Fhexo-NextT%E4%B8%BB%E9%A2%98%E9%85%8D%E7%BD%AE%E5%BF%AB%E9%80%9F%E6%95%99%E7%A8%8B%2F</url>
    <content type="text"><![CDATA[前言博客的初衷是为了写文章、发布文章，追求简洁和加载速度。最终选择了NextT主题。 NextT主题Github地址 NextT主题官方文档 更换主题下载NextT主题 下载后解压ZIP，把文件夹名字修改成NextT，并把主题文件夹复制到 D:\Myblog\themes里面。 修改主题用vs code（你也可以用其他编辑器）打开 D:\Myblog\_config.yml，搜索theme，修改为：NextT，保存并退出。 博客面貌仔细修改改主题样式D:\Myblog\themes\NextT\_config.yml，搜索 Scheme——&gt; 改用 scheme: Gemini 语言设置NextT很容易出现德语的情况，所以打开 D:\Myblog\_config.yml，把语言改成： 1language: en 添加目录栏选项D:\Myblog\themes\NextT\_config.yml，搜索 menu——&gt; 设置 about、archives、categories、tags、Books、Video、Game。 添加新的栏： 123456789menu: about: /about/ || user archives: /archives/ || archive categories: /categories/ || th tags: /tags/ || tags Books: /Books/ || eye Video: /Video/ || play-circle Game: /Game/ || gamepad #home: / || home 之后在D:\Myblog右键Git Bash here： 123$ hexo new page "archives"#以及其他菜单项categories、tags、Books、Video、Game。 打开 D:\Myblog\source，打开对应md文件，一一修改type： 123title: categoriesdate: 2019-05-15 17:29:26type: &quot;categories&quot; 代码块主题D:\Myblog\themes\NextT\_config.yml，搜索 highlight_theme——&gt; 改为 night eighties 侧边栏D:\Myblog\themes\NextT\_config.yml，搜索 social——&gt;开启微博 首页文章摘要D:\Myblog\themes\NextT\_config.yml，搜索 auto_excerpt——&gt;开启 标签图标更改打开D:\Myblog\themes\NextT\layout\_marcro\post.swig文件，搜索 post_tags，将 #号 换成&lt;i class=&quot;fa fa-tag&quot;&gt;&lt;/i&gt; 添加背景动态js https://github.com/theme-next/theme-next-canvas-nest D:\Myblog\themes\NextT文件夹下，Git Bash here： 1$ git clone https://github.com/theme-next/theme-next-canvas-nest source/lib/canvas-nest 打开D:\Myblog\themes\NextT\_config.yml，修改： 1234567canvas_nest: enable: true onmobile: true # display on mobile or not color: "255,0,0" # RGB values, use ',' to separate, 改成红色了 opacity: 0.7 # the opacity of line: 0~1 zIndex: -1 # z-index property of the background count: 150 # the number of lines 加载条 https://github.hubspot.com/pace/docs/welcome/ PS：如果网页加载慢，就关掉这个 D:\Myblog\themes\NextT文件夹下，Git Bash here： 1$ git clone https://github.com/theme-next/theme-next-pace source/lib/pace D:\Myblog\themes\NextT\_config.yml 12pace: truepace_theme: pace-theme-big-counter 关注Github http://tholman.com/github-corners/ 打开D:\Myblog\themes\NextT\layout\_layout.swig文件，搜索&lt;div class=&quot;headband&quot;&gt;&lt;/div&gt; 将复制的内容粘贴到&lt;div class=&quot;headband&quot;&gt;&lt;/div&gt;下面，如下： 1&lt;a href=&quot;https://github.com/sailorlisa&quot; class=&quot;github-corner&quot; aria-label=&quot;View source on GitHub&quot;&gt;&lt;svg width=&quot;92&quot; height=&quot;92&quot; viewBox=&quot;0 0 250 250&quot; style=&quot;fill:#b495e3; color:#fff; position: absolute; top: 0; border: 0; right: 0;&quot; aria-hidden=&quot;true&quot;&gt;&lt;path d=&quot;M0,0 L115,115 L130,115 L142,142 L250,250 L250,0 Z&quot;&gt;&lt;/path&gt;&lt;path d=&quot;M128.3,109.0 C113.8,99.7 119.0,89.6 119.0,89.6 C122.0,82.7 120.5,78.6 120.5,78.6 C119.2,72.0 123.4,76.3 123.4,76.3 C127.3,80.9 125.5,87.3 125.5,87.3 C122.9,97.6 130.6,101.9 134.4,103.2&quot; fill=&quot;currentColor&quot; style=&quot;transform-origin: 130px 106px;&quot; class=&quot;octo-arm&quot;&gt;&lt;/path&gt;&lt;path d=&quot;M115.0,115.0 C114.9,115.1 118.7,116.5 119.8,115.4 L133.7,101.6 C136.9,99.2 139.9,98.4 142.2,98.6 C133.8,88.0 127.5,74.4 143.8,58.0 C148.5,53.4 154.0,51.2 159.7,51.0 C160.3,49.4 163.2,43.6 171.4,40.1 C171.4,40.1 176.1,42.5 178.8,56.2 C183.1,58.6 187.2,61.8 190.9,65.4 C194.5,69.0 197.7,73.2 200.1,77.6 C213.8,80.2 216.3,84.9 216.3,84.9 C212.7,93.1 206.9,96.0 205.4,96.6 C205.1,102.4 203.0,107.8 198.3,112.5 C181.9,128.9 168.3,122.5 157.7,114.1 C157.9,116.9 156.7,120.9 152.7,124.9 L141.0,136.5 C139.8,137.7 141.6,141.9 141.8,141.8 Z&quot; fill=&quot;currentColor&quot; class=&quot;octo-body&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;&lt;style&gt;.github-corner:hover .octo-arm&#123;animation:octocat-wave 560ms ease-in-out&#125;@keyframes octocat-wave&#123;0%,100%&#123;transform:rotate(0)&#125;20%,60%&#123;transform:rotate(-25deg)&#125;40%,80%&#123;transform:rotate(10deg)&#125;&#125;@media (max-width:500px)&#123;.github-corner:hover .octo-arm&#123;animation:none&#125;.github-corner .octo-arm&#123;animation:octocat-wave 560ms ease-in-out&#125;&#125;&lt;/style&gt; 也可以修改D:\Myblog\themes\NextT\_config.yml里: 1234github_banner: enable: true permalink: https://github.com/sailorlisa title: Follow me on GitHub 白猫插件 Github地址：https://github.com/EYHN/hexo-helper-live2d/blob/master/README.zh-CN.md 123$ npm install --save hexo-helper-live2d$ npm install live2d-widget-model-tororo 之后在D:\Myblog\_config.yml最后添加内容： 1234567891011121314151617# 白猫模型live2d: enable: true scriptFrom: local pluginRootPath: live2dw/ pluginJsPath: lib/ pluginModelPath: assets/ tagMode: false debug: false model: use: live2d-widget-model-tororo display: position: right width: 150 height: 300 mobile: show: false #手机上不显示 图片文件夹插件1.将 D:\Myblog\_config.yml文件中的 post_asset_folder 选项设为 true 2.D:\Myblog，右键Git Bash here，输入： 1$ npm install hexo-asset-image --save 添加搜索栏D:\Myblog，右键Git Bash here，输入： 1$ npm install hexo-generator-searchdb --save D:\Myblog\_config.yml添加： 123456#表示站内搜索search: path: search.xml field: post format: html limit: 10000 D:\Myblog\themes\NextT\_config.yml，搜索local_search： 12local_search: enable: true 标签云 https://github.com/MikeCoder/hexo-tag-cloud D:\Myblog，右键Git Bash here，输入： 1$ npm install hexo-tag-cloud --save D:\Myblog\themes\NextT\layout\_macro\sidebar.swig，然后添加内容： 123456789101112&#123;% if site.tags.length &gt; 1 %&#125;&lt;script type=&quot;text/javascript&quot; charset=&quot;utf-8&quot; src=&quot;&#123;&#123; url_for(&apos;/js/tagcloud.js&apos;) &#125;&#125;&quot;&gt;&lt;/script&gt;&lt;script type=&quot;text/javascript&quot; charset=&quot;utf-8&quot; src=&quot;&#123;&#123; url_for(&apos;/js/tagcanvas.js&apos;) &#125;&#125;&quot;&gt;&lt;/script&gt;&lt;div class=&quot;widget-wrap&quot;&gt; &lt;h3 class=&quot;widget-title&quot;&gt;Tag Cloud&lt;/h3&gt; &lt;div id=&quot;myCanvasContainer&quot; class=&quot;widget tagcloud&quot;&gt; &lt;canvas width=&quot;250&quot; height=&quot;250&quot; id=&quot;resCanvas&quot; style=&quot;width=100%&quot;&gt; &#123;&#123; list_tags() &#125;&#125; &lt;/canvas&gt; &lt;/div&gt;&lt;/div&gt;&#123;% endif %&#125; D:\Myblog\_config.yml添加： 1234567# hexo-tag-cloudtag_cloud: textFont: Trebuchet MS, Helvetica textColor: '#333' textHeight: 22 outlineColor: '#E2E1D1' maxSpeed: 0.2 最后预览部署1234$ hexo clean &amp;&amp; hexo g &amp;&amp; hexo s#预览之后没问题就部署$ hexo d]]></content>
      <categories>
        <category>hexo</category>
      </categories>
      <tags>
        <tag>主题</tag>
        <tag>hexo</tag>
        <tag>NextT</tag>
        <tag>theme</tag>
        <tag>博客</tag>
        <tag>blog</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[hexo+Github搭建个人博客快速教程]]></title>
    <url>%2F2019%2F05%2F17%2Fhexo-Github%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E5%BF%AB%E9%80%9F%E6%95%99%E7%A8%8B%2F</url>
    <content type="text"><![CDATA[前言 推荐hexo搭建博客详细教程：&lt;https://eirunye.github.io/categories/Hexo/ 由于同内容的教程实在太多，感觉没多大必要再写。所以简单记录下快速搭建个人博客的流程，方便自己使用。 提前准备 Github 注册账号 Node.js 下载，安装 Git 下载，安装 部署博客Git配置在桌面，右键Git Bash here： 123$ git config --global user.name "sailorlisa" $ git config --global user.email "sailorlisa@outlook.com" 登陆Github，创建新的仓库——&gt;Repository name 为 sailorlisa.github.io——&gt;Public——&gt;Creating repository。 SSH配置在桌面，右键Git Bash here： 1$ ssh-keygen -t rsa -C "sailorlisa@outlook.com" 遇到提示，要你输入密码，按Enter跳过。 上面显示C盘路径里有我的Public key，找到对应路径文件，右键，用记事本打开，复制内容。 接下来去github，点击自己头像下的Settings——&gt;Personal settings——&gt;SSH and GPG keys——&gt;New SSH key。 把刚刚复制的一长串内容粘贴在Key栏，Title填hexoblog。之后点Add SSH key。 安装hexo在桌面，右键Git Bash here： 1234567$ ssh git@github.com$ ssh -T git@github.com #验证SSH是否有效$ npm -v #看看有没有安装npm$ npm install -g hexo #安装hexo博客框架 在D盘创建文件夹“Myblog”，在文件夹内 右键Git Bash here： 1234567$ hexo init$ npm install$ npm install hexo-deployer-git --save #能让你使用hexo deploy命令上传blog到github上$ hexo server 鼠标右键复制localhost:4000，用浏览器进入，预览下看看有没有问题。 没有问题后，打开D盘Myblog文件夹里，找到_config.yml（站点配置文件），右键用vs code打开，下滚，找到deploy，修改后保存。 1234deploy: type: git repository: git@github.com:sailorlisa/sailorlisa.github.io.git branch: master repository后面的内容是来自这里： 修改后回到D盘Myblog文件夹，右键Git Bash here： 1$ hexo g &amp;&amp; hexo s 预览下，没问题之后退出，然后去就换主题和配置主题。]]></content>
      <categories>
        <category>hexo</category>
      </categories>
      <tags>
        <tag>hexo</tag>
        <tag>Github</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Jupyter Notebook Cheat Sheet中文]]></title>
    <url>%2F2019%2F05%2F16%2FJupyter-Notebook-Cheat-Sheet%E4%B8%AD%E6%96%87%2F</url>
    <content type="text"><![CDATA[https://github.com/FavioVazquez/ds-cheatsheets Working with Different Programming Languages Asking For Help Two Modes Saving/Loading Notebooks Writing Code And Text1 Writing Code And Text2 Widgets]]></content>
      <tags>
        <tag>python</tag>
        <tag>jupyter</tag>
        <tag>jupyter notebook</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[SynthWave'84 - VS Code使用流程]]></title>
    <url>%2F2019%2F05%2F16%2FSynthWave-84-VS-Code%E4%BD%BF%E7%94%A8%E6%B5%81%E7%A8%8B%2F</url>
    <content type="text"><![CDATA[赛博朋克风，好看！ 安装之前Github地址：https://github.com/robb0wen/synthwave-vscode，先看开发者写的文档 下载安装vs code：https://code.visualstudio.com/ 配置主题下载安装theme 打开vs code，点击​ 文件 ——&gt; 首选项——&gt; 扩展（Ctrl + Shift + X）。 在搜索扩展里搜索 SynthWave，点击 安装。 再次在搜索扩展里搜索 Custom CSS and JS Loader，点击 安装。 在vs code里，点击 文件 ——&gt; 新建文件，打开网址，把synthwave84.css里的所有代码复制粘贴过去，保存，文件命名为 synthwave84.css，下拉保存类型为css，点击确定。 接下来我们需要修改vs code的settings.json： 最快的方法：点击 文件 ——&gt; 首选项 ——&gt; 设置——&gt; 扩展——&gt;在settings.json中编辑，弹出之后，右键标签，选择 在资源管理器中显示 ，就能自动打开路径文件夹（C:\Users\dell\AppData\Roaming\Code\User）了。 回到vs code，settings.json文件，修改代码，引用刚刚的css文件，windows用户在后面复制粘贴以下内容并保存： 12345&#123; "vscode_custom_css.imports": [ "file:///D:/synthwave84.css" ]&#125; 注意：自己修改file后面的路径，你的css文件保存在哪里，就用对应路径。 修改完后，win用户使用快捷键 Ctrl + Shift + P，输入 Enable custom CSS and JS ， 找到后鼠标点击一下，会出现提示： 点击Restart Visual Studio Code。 点击旁边的齿轮按钮，选择不再显示这条提醒。 如果还是没有发光效果，使用快捷键 Ctrl + Shift + P，输入 reload custom CSS and JS， 找到后鼠标点击一下，就可以看到发光效果了，不会很刺眼： 不稳定的插件 VS code doesn’t natively support text effects and as a result, the glow is experimental. It’s likely to be buggy and, whilst it looks rad, it isn’t intended for extended use. 文档上有这么一句话，注意这个Custom CSS and JS Loader 插件很容易坏掉，不是主题的问题。希望以后这个插件更新后能避免这种情况~ 更新 Every time you update VS code, you will need to repeat this step to re-enable custom CSS and JS. Similarly, when the theme updates, you will need to copy the updated css to your chosen location. This is less than ideal, but until VS code add the option to use custom CSS natively, it’s unfortunately the only option. 每次我们更新vs code，都需要重复上面的步骤去re-enable custom CSS and JS。 同样地，主题有了更新后，你也需要去复制最新的css文件去覆盖你的旧css文件。 关掉发光效果和卸载 The glow effect started as a joke and was never intended for long-term coding sessions. If you want to turn it off, you can disable it at any time by opening your command palette with Ctrl + Shift + P or Shift + ⌘ + P and choose “Disable custom CSS”. If you decide to change to a different theme altogether, you will also need to disable the custom css in this way. You may also wish to remove the file path from your settings.json. 这个发光效果不是很稳定，如果想要关掉，打开vs code，使用快捷键 Ctrl + Shift + P，输入 Disable custom CSS ，找到后鼠标点击一下。 如何卸载主题？ 先根据上面的步骤把发光效果关掉，然后打开settings.json，把之前添加的那行代码删掉 参考资料1.https://github.com/robb0wen/synthwave-vscode 2.https://jinkey.ai/post/tech/ru-he-pei-zhi-tou-ming-fa-guang-de-sao-qi-vscode]]></content>
      <categories>
        <category>主题</category>
      </categories>
      <tags>
        <tag>主题</tag>
        <tag>vs code</tag>
        <tag>赛博朋克</tag>
        <tag>霓虹</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[俄罗斯方块试玩-react-tetris]]></title>
    <url>%2F2019%2F05%2F16%2F%E4%BF%84%E7%BD%97%E6%96%AF%E6%96%B9%E5%9D%97%E8%AF%95%E7%8E%A9-react-tetris%2F</url>
    <content type="text"><![CDATA[试玩用手机浏览器打开https://chvin.github.io/react-tetris/ 真的好经典啊，小时候的游戏机就有，不过我玩这个真的很菜…很快就堵死了hhhhhhhhhhh Github地址https://github.com/chvin/react-tetris 开发者是用React、Redux、Immutable做俄罗斯方块游戏。响应式设计真的很方便，文档里还讲了开发过程时的细节，好棒！ 果断给了Star，然后把在线玩的地址作为书签放在手机桌面w]]></content>
      <categories>
        <category>游戏</category>
      </categories>
      <tags>
        <tag>前端</tag>
        <tag>React</tag>
        <tag>Redux</tag>
        <tag>Immutable</tag>
        <tag>页面游戏</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[LogoDiy试玩-PB风格Logo制作]]></title>
    <url>%2F2019%2F05%2F16%2FLogoDiy%E8%AF%95%E7%8E%A9-PB%E9%A3%8E%E6%A0%BCLogo%E5%88%B6%E4%BD%9C%2F</url>
    <content type="text"><![CDATA[在线Logo制作工具https://www.logodiy.online/ 直接打开就可以制作了！我们熟悉的风格~立马制作了几个试试： Github地址http://t.cn/EKJMeRt 果断点了star! 美中不足的是，预设的Color Prefix和Suffix只有一种，要是起码有3种搭配好的预设颜色就更好了，希望以后会有]]></content>
      <tags>
        <tag>logo制作</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[windows下Chrome浏览器快捷键]]></title>
    <url>%2F2019%2F05%2F15%2Fwindows%E4%B8%8BChrome%E6%B5%8F%E8%A7%88%E5%99%A8%E5%BF%AB%E6%8D%B7%E9%94%AE%2F</url>
    <content type="text"><![CDATA[https://support.google.com/chrome/answer/157179?hl=zh-Hans 因为上面那个网址得科学上网才能打开，所以我在这里COPY下来，方便自己使用 Windows 和 Linux 标签页和窗口快捷键 操作 快捷键 打开新窗口 Ctrl + n 在无痕模式下打开新窗口 Ctrl + Shift + n 打开新的标签页，并跳转到该标签页 Ctrl + t 重新打开最后关闭的标签页，并跳转到该标签页 Ctrl + Shift + t 跳转到下一个打开的标签页 Ctrl + Tab 或 Ctrl + PgDn 跳转到上一个打开的标签页 Ctrl + Shift + Tab 或 Ctrl + PgUp 跳转到特定标签页 Ctrl + 1 到 Ctrl + 8 跳转到最后一个标签页 Ctrl + 9 在当前标签页中打开主页 Alt + Home 打开当前标签页浏览记录中记录的上一个页面 Alt + 向左箭头键 打开当前标签页浏览记录中记录的下一个页面 Alt + 向右箭头键 关闭当前标签页 Ctrl + w或Ctrl + F4 关闭当前窗口 Ctrl + Shift + w 最小化当前窗口 Alt + 空格键 + n 最大化当前窗口 Alt + 空格键 + x 关闭当前窗口 Alt + F4 退出 Google Chrome Ctrl + Shift + q Google Chrome 功能快捷键 操作 快捷键 打开 Chrome 菜单 Alt + f或Alt + e 或 F10 + Enter 键 显示或隐藏书签栏 Ctrl + Shift + b 打开书签管理器 Ctrl + Shift + o 在新标签页中打开“历史记录”页 Ctrl + h 在新标签页中打开“下载内容”页 Ctrl + j 打开 Chrome 任务管理器 Shift + Esc 将焦点放置在 Chrome 工具栏中的第一项上 Shift + Alt + t 将焦点放置在 Chrome 工具栏中的最后一项上 F10 将焦点移到未聚焦于的对话框（如果显示）中 F6 打开查找栏搜索当前网页 Ctrl + f 或 F3 跳转到与查找栏中搜索字词相匹配的下一条内容 Ctrl + g 跳转到与查找栏中搜索字词相匹配的上一条内容 Ctrl + Shift + g 打开“开发者工具” Ctrl + Shift + j 或 F12 打开“清除浏览数据”选项 Ctrl + Shift + Delete 在新标签页中打开 Chrome 帮助中心 F1 使用其他帐号登录或以访客身份浏览 Ctrl + Shift + m 打开反馈表单 Alt + Shift + i 地址栏快捷键 操作 快捷键 使用默认搜索引擎进行搜索 输入搜索字词并按Enter 键 使用其他搜索引擎进行搜索 输入搜索引擎名称，然后按Tab 键 为网站名称添加 www. 和 .com，并在当前标签页中打开该网站 输入网站名称并按 Ctrl + Enter 键 打开新的标签页并执行 Google 搜索 输入搜索字词并按 Alt + Enter 键 跳转到地址栏 Ctrl + l、Alt + d或F6 从页面中的任意位置搜索 Ctrl + k或Ctrl + e 从地址栏中移除联想查询内容 按向下箭头键以突出显示相应内容，然后按Shift + Delete 键 网页快捷键 操作 快捷键 打开选项以打印当前网页 Ctrl + p 打开选项以保存当前网页 Ctrl + s 重新加载当前网页 F5或Ctrl + r 重新加载当前网页（忽略缓存的内容） Shift + F5 或Ctrl + Shift + r 停止加载网页 Esc 浏览下一个可点击项 Tab 浏览上一个可点击项 Shift + Tab 使用 Chrome 打开计算机中的文件 按住 Ctrl + o 键并选择文件 显示当前网页的 HTML 源代码（不可修改） Ctrl + u 将当前网页保存为书签 Ctrl + d 将所有打开的标签页以书签的形式保存在新文件夹中 Ctrl + Shift + d 开启或关闭全屏模式 F11 放大网页上的所有内容 Ctrl 和 + 缩小网页上的所有内容 Ctrl 和 - 将网页上的所有内容恢复到默认大小 Ctrl + 0 向下滚动网页，一次一个屏幕 空格键 或 PgDn 向上滚动网页，一次一个屏幕 Shift + 空格键 或 PgUp 转到网页顶部 首页 转到网页底部 末尾 在网页上水平滚动 按住 Shift 键并滚动鼠标滚轮 将光标移到文本字段中的上一个字词前面 Ctrl + 向左箭头键 将光标移到文本字段中的上一个字词后面 Ctrl + 向右箭头键 删除文本字段中的上一个字词 Ctrl + Backspace 在当前标签页中打开主页 Alt + Home 鼠标快捷键 操作 快捷键 在当前标签页中打开链接（仅限鼠标） 将链接拖到标签页中 在新的后台标签页中打开链接 按住 Ctrl 键的同时点击链接 打开链接，并跳转到该链接 按住 Ctrl + Shift 键的同时点击链接 打开链接，并跳转到该链接（仅使用鼠标） 将链接拖到标签栏的空白区域 在新窗口中打开链接 按住 Shift 键的同时点击链接 在新窗口中打开标签页（仅使用鼠标） 将标签页拖出标签栏 将标签页移至当前窗口（仅限鼠标） 将标签页拖到现有窗口中 将标签页移回其原始位置 拖动标签页的同时按 Esc 将当前网页保存为书签 将相应网址拖动到书签栏中 下载链接目标 按住 Alt 键的同时点击链接 显示浏览记录 右键点击“后退”箭头 或“前进”箭头 ，或者点击（按住鼠标按键别松手）“后退”箭头 或“前进”箭头 在最大化模式和窗口模式间切换 双击标签栏的空白区域 放大网页上的所有内容 按住 Ctrl 键的同时向上滚动鼠标滚轮 缩小网页上的所有内容 按住 Ctrl 键的同时向下滚动鼠标滚轮]]></content>
      <categories>
        <category>Chrome</category>
      </categories>
      <tags>
        <tag>chrome</tag>
        <tag>快捷键</tag>
        <tag>win10</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[我喜欢用的win10快捷键]]></title>
    <url>%2F2019%2F05%2F15%2F%E6%88%91%E5%96%9C%E6%AC%A2%E7%94%A8%E7%9A%84win10%E5%BF%AB%E6%8D%B7%E9%94%AE%2F</url>
    <content type="text"><![CDATA[Alt + Tab 在打开的应用之间切换 F5刷新强迫症的我，特别喜欢刷新和清空回收站 WIN+PrtScn 截图就和steam里F12一样，全屏幕截图 WIN + Pause 显示“系统属性”对话框我只在这种时候才会用上Pause键… WIN + 加号 (+) 打开“放大镜”录教学类视频时才用的功能 Home键用电脑刷微博的时候，有时“返回顶部”button怎么找都找不到，这时用键盘右边上角的Home键就行了，一秒带你上天 虚拟桌面键盘快捷键WIN + Tab 打开任务视图我的大爱 WIN + Ctrl + D 添加虚拟桌面 WIN + Ctrl + F4 关闭你正在使用的虚拟桌面我一开始创建新的虚拟桌面时总是忘记如何关闭，越创越多… WIN + Ctrl + 向右键→ 在你于右侧创建的虚拟桌面之间切换WIN + Ctrl + 向左键← 在你于左侧创建的虚拟桌面之间切换无缝切换2333]]></content>
      <categories>
        <category>win10</category>
      </categories>
      <tags>
        <tag>快捷键</tag>
        <tag>win10</tag>
        <tag>WIN10</tag>
      </tags>
  </entry>
</search>
